
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fa8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002140  08002140  00012140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002158  08002158  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002160  08002160  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002160  08002160  00012160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002164  08002164  00012164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000004c  080021b4  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080021b4  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007750  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012bf  00000000  00000000  000277cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00028a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  000290a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014855  00000000  00000000  00029648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079e0  00000000  00000000  0003de9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008190a  00000000  00000000  0004587d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c4  00000000  00000000  000c71d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000004c 	.word	0x2000004c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002128 	.word	0x08002128

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000050 	.word	0x20000050
 80001d4:	08002128 	.word	0x08002128

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fb8e 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f8ee 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f980 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f954 	bl	8000798 <MX_USART2_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//Call function every 10 ms = 100Hz
		static uint32_t timestamp = 0;
		if (HAL_GetTick() >= timestamp) {
 80004f0:	f000 fbec 	bl	8000ccc <HAL_GetTick>
 80004f4:	4602      	mov	r2, r0
 80004f6:	4b6b      	ldr	r3, [pc, #428]	; (80006a4 <main+0x1c8>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d3f8      	bcc.n	80004f0 <main+0x14>
			timestamp = HAL_GetTick() + 10;
 80004fe:	f000 fbe5 	bl	8000ccc <HAL_GetTick>
 8000502:	4603      	mov	r3, r0
 8000504:	330a      	adds	r3, #10
 8000506:	4a67      	ldr	r2, [pc, #412]	; (80006a4 <main+0x1c8>)
 8000508:	6013      	str	r3, [r2, #0]
			ReadMatrixButton_1Row();
 800050a:	f000 fa1f 	bl	800094c <ReadMatrixButton_1Row>

			if (LastButton == 0 && ButtonMatrix > 0)
 800050e:	4b66      	ldr	r3, [pc, #408]	; (80006a8 <main+0x1cc>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	f040 80bf 	bne.w	8000696 <main+0x1ba>
 8000518:	4b64      	ldr	r3, [pc, #400]	; (80006ac <main+0x1d0>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	f000 80ba 	beq.w	8000696 <main+0x1ba>
			{
				if (ButtonMatrix == 8) // 0
 8000522:	4b62      	ldr	r3, [pc, #392]	; (80006ac <main+0x1d0>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	2b08      	cmp	r3, #8
 8000528:	d105      	bne.n	8000536 <main+0x5a>
				{
					SumNumber += 8;
 800052a:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <main+0x1d4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	3308      	adds	r3, #8
 8000530:	4a5f      	ldr	r2, [pc, #380]	; (80006b0 <main+0x1d4>)
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	e07d      	b.n	8000632 <main+0x156>
				}

				else if (ButtonMatrix == 4) // 1
 8000536:	4b5d      	ldr	r3, [pc, #372]	; (80006ac <main+0x1d0>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	2b04      	cmp	r3, #4
 800053c:	d105      	bne.n	800054a <main+0x6e>
				{
					SumNumber += 4;
 800053e:	4b5c      	ldr	r3, [pc, #368]	; (80006b0 <main+0x1d4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3304      	adds	r3, #4
 8000544:	4a5a      	ldr	r2, [pc, #360]	; (80006b0 <main+0x1d4>)
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	e073      	b.n	8000632 <main+0x156>
				}

				else if (ButtonMatrix == 64) // 2
 800054a:	4b58      	ldr	r3, [pc, #352]	; (80006ac <main+0x1d0>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	2b40      	cmp	r3, #64	; 0x40
 8000550:	d105      	bne.n	800055e <main+0x82>
				{
					SumNumber += 64;
 8000552:	4b57      	ldr	r3, [pc, #348]	; (80006b0 <main+0x1d4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	3340      	adds	r3, #64	; 0x40
 8000558:	4a55      	ldr	r2, [pc, #340]	; (80006b0 <main+0x1d4>)
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	e069      	b.n	8000632 <main+0x156>
				}

				else if (ButtonMatrix == 1024) // 3
 800055e:	4b53      	ldr	r3, [pc, #332]	; (80006ac <main+0x1d0>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000566:	d106      	bne.n	8000576 <main+0x9a>
				{
					SumNumber += 1024;
 8000568:	4b51      	ldr	r3, [pc, #324]	; (80006b0 <main+0x1d4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000570:	4a4f      	ldr	r2, [pc, #316]	; (80006b0 <main+0x1d4>)
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	e05d      	b.n	8000632 <main+0x156>
				}

				else if (ButtonMatrix == 2) // 4
 8000576:	4b4d      	ldr	r3, [pc, #308]	; (80006ac <main+0x1d0>)
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	2b02      	cmp	r3, #2
 800057c:	d110      	bne.n	80005a0 <main+0xc4>
				{
					if (SumNumber == 2116){
 800057e:	4b4c      	ldr	r3, [pc, #304]	; (80006b0 <main+0x1d4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f640 0244 	movw	r2, #2116	; 0x844
 8000586:	4293      	cmp	r3, r2
 8000588:	d104      	bne.n	8000594 <main+0xb8>
						LastNumber += 1;
 800058a:	4b4a      	ldr	r3, [pc, #296]	; (80006b4 <main+0x1d8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	4a48      	ldr	r2, [pc, #288]	; (80006b4 <main+0x1d8>)
 8000592:	6013      	str	r3, [r2, #0]
					}

					SumNumber += 2;
 8000594:	4b46      	ldr	r3, [pc, #280]	; (80006b0 <main+0x1d4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3302      	adds	r3, #2
 800059a:	4a45      	ldr	r2, [pc, #276]	; (80006b0 <main+0x1d4>)
 800059c:	6013      	str	r3, [r2, #0]
 800059e:	e048      	b.n	8000632 <main+0x156>
				}

				else if (ButtonMatrix == 32) // 5
 80005a0:	4b42      	ldr	r3, [pc, #264]	; (80006ac <main+0x1d0>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	2b20      	cmp	r3, #32
 80005a6:	d110      	bne.n	80005ca <main+0xee>
				{
					if (SumNumber == 1548){ // 64340
 80005a8:	4b41      	ldr	r3, [pc, #260]	; (80006b0 <main+0x1d4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f240 620c 	movw	r2, #1548	; 0x60c
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d104      	bne.n	80005be <main+0xe2>
						MidNumber += 1;
 80005b4:	4b40      	ldr	r3, [pc, #256]	; (80006b8 <main+0x1dc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	4a3f      	ldr	r2, [pc, #252]	; (80006b8 <main+0x1dc>)
 80005bc:	6013      	str	r3, [r2, #0]
					}

					SumNumber += 32;
 80005be:	4b3c      	ldr	r3, [pc, #240]	; (80006b0 <main+0x1d4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3320      	adds	r3, #32
 80005c4:	4a3a      	ldr	r2, [pc, #232]	; (80006b0 <main+0x1d4>)
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	e033      	b.n	8000632 <main+0x156>
				}

				else if (ButtonMatrix == 512) // 6
 80005ca:	4b38      	ldr	r3, [pc, #224]	; (80006ac <main+0x1d0>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005d2:	d10f      	bne.n	80005f4 <main+0x118>
				{
					if(SumNumber == 0){
 80005d4:	4b36      	ldr	r3, [pc, #216]	; (80006b0 <main+0x1d4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d104      	bne.n	80005e6 <main+0x10a>
						FirstNumber += 1;
 80005dc:	4b37      	ldr	r3, [pc, #220]	; (80006bc <main+0x1e0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a36      	ldr	r2, [pc, #216]	; (80006bc <main+0x1e0>)
 80005e4:	6013      	str	r3, [r2, #0]
					}

					SumNumber += 512;
 80005e6:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <main+0x1d4>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80005ee:	4a30      	ldr	r2, [pc, #192]	; (80006b0 <main+0x1d4>)
 80005f0:	6013      	str	r3, [r2, #0]
 80005f2:	e01e      	b.n	8000632 <main+0x156>

				}

				else if (ButtonMatrix == 1) // 7
 80005f4:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <main+0x1d0>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d105      	bne.n	8000608 <main+0x12c>
				{
					SumNumber += 1;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <main+0x1d4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	4a2b      	ldr	r2, [pc, #172]	; (80006b0 <main+0x1d4>)
 8000604:	6013      	str	r3, [r2, #0]
 8000606:	e014      	b.n	8000632 <main+0x156>
				}

				else if (ButtonMatrix == 16 ) // 8
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <main+0x1d0>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	2b10      	cmp	r3, #16
 800060e:	d105      	bne.n	800061c <main+0x140>
				{
					SumNumber += 16;
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <main+0x1d4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3310      	adds	r3, #16
 8000616:	4a26      	ldr	r2, [pc, #152]	; (80006b0 <main+0x1d4>)
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	e00a      	b.n	8000632 <main+0x156>
				}


				else if (ButtonMatrix == 256) // 9
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <main+0x1d0>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000624:	d105      	bne.n	8000632 <main+0x156>
				{
					SumNumber += 256;
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <main+0x1d4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <main+0x1d4>)
 8000630:	6013      	str	r3, [r2, #0]
				}

				//LastButton = Button ;

				if (ButtonMatrix == 4096) // clear
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <main+0x1d0>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800063a:	d110      	bne.n	800065e <main+0x182>
					{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET); // LED OFF
 800063c:	2200      	movs	r2, #0
 800063e:	2120      	movs	r1, #32
 8000640:	481f      	ldr	r0, [pc, #124]	; (80006c0 <main+0x1e4>)
 8000642:	f000 fdd1 	bl	80011e8 <HAL_GPIO_WritePin>
					SumNumber = 0;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <main+0x1d4>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
					FirstNumber = 0;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <main+0x1e0>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
					MidNumber = 0;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <main+0x1dc>)
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
					LastNumber = 0;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <main+0x1d8>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
					}

				if ((ButtonMatrix == 32768) && (SumNumber == 2118) && (FirstNumber == 1 ) && (MidNumber == 1) && (LastNumber == 1)) // OK 64340500064
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <main+0x1d0>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000666:	d116      	bne.n	8000696 <main+0x1ba>
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <main+0x1d4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f640 0246 	movw	r2, #2118	; 0x846
 8000670:	4293      	cmp	r3, r2
 8000672:	d110      	bne.n	8000696 <main+0x1ba>
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <main+0x1e0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d10c      	bne.n	8000696 <main+0x1ba>
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <main+0x1dc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d108      	bne.n	8000696 <main+0x1ba>
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <main+0x1d8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d104      	bne.n	8000696 <main+0x1ba>
					{

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET); // LED ON
 800068c:	2201      	movs	r2, #1
 800068e:	2120      	movs	r1, #32
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <main+0x1e4>)
 8000692:	f000 fda9 	bl	80011e8 <HAL_GPIO_WritePin>
					}
			}

			LastButton = ButtonMatrix;
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <main+0x1d0>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	4b02      	ldr	r3, [pc, #8]	; (80006a8 <main+0x1cc>)
 800069e:	601a      	str	r2, [r3, #0]
	while (1) {
 80006a0:	e726      	b.n	80004f0 <main+0x14>
 80006a2:	bf00      	nop
 80006a4:	200000c4 	.word	0x200000c4
 80006a8:	200000b4 	.word	0x200000b4
 80006ac:	200000ac 	.word	0x200000ac
 80006b0:	200000b0 	.word	0x200000b0
 80006b4:	200000c0 	.word	0x200000c0
 80006b8:	200000bc 	.word	0x200000bc
 80006bc:	200000b8 	.word	0x200000b8
 80006c0:	40020000 	.word	0x40020000

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fd20 	bl	8002118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000734:	2310      	movs	r3, #16
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000738:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073e:	2304      	movs	r3, #4
 8000740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000742:	2304      	movs	r3, #4
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fd66 	bl	800121c <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000756:	f000 f977 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f000 ffc8 	bl	800170c <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f961 	bl	8000a48 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f001 f9bc 	bl	8001b4c <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f935 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000068 	.word	0x20000068
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b4d      	ldr	r3, [pc, #308]	; (800093c <MX_GPIO_Init+0x150>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a4c      	ldr	r2, [pc, #304]	; (800093c <MX_GPIO_Init+0x150>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b4a      	ldr	r3, [pc, #296]	; (800093c <MX_GPIO_Init+0x150>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b46      	ldr	r3, [pc, #280]	; (800093c <MX_GPIO_Init+0x150>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a45      	ldr	r2, [pc, #276]	; (800093c <MX_GPIO_Init+0x150>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b43      	ldr	r3, [pc, #268]	; (800093c <MX_GPIO_Init+0x150>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b3f      	ldr	r3, [pc, #252]	; (800093c <MX_GPIO_Init+0x150>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_GPIO_Init+0x150>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b3c      	ldr	r3, [pc, #240]	; (800093c <MX_GPIO_Init+0x150>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b38      	ldr	r3, [pc, #224]	; (800093c <MX_GPIO_Init+0x150>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a37      	ldr	r2, [pc, #220]	; (800093c <MX_GPIO_Init+0x150>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b35      	ldr	r3, [pc, #212]	; (800093c <MX_GPIO_Init+0x150>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	4832      	ldr	r0, [pc, #200]	; (8000940 <MX_GPIO_Init+0x154>)
 8000878:	f000 fcb6 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000882:	482f      	ldr	r0, [pc, #188]	; (8000940 <MX_GPIO_Init+0x154>)
 8000884:	f000 fcb0 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R2_Pin|R4_Pin|R3_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2138      	movs	r1, #56	; 0x38
 800088c:	482d      	ldr	r0, [pc, #180]	; (8000944 <MX_GPIO_Init+0x158>)
 800088e:	f000 fcab 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000898:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4827      	ldr	r0, [pc, #156]	; (8000948 <MX_GPIO_Init+0x15c>)
 80008aa:	f000 fb01 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin R1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|R1_Pin;
 80008ae:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	481e      	ldr	r0, [pc, #120]	; (8000940 <MX_GPIO_Init+0x154>)
 80008c8:	f000 faf2 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : L4_Pin L1_Pin */
  GPIO_InitStruct.Pin = L4_Pin|L1_Pin;
 80008cc:	f44f 7320 	mov.w	r3, #640	; 0x280
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4817      	ldr	r0, [pc, #92]	; (8000940 <MX_GPIO_Init+0x154>)
 80008e2:	f000 fae5 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : L2_Pin */
  GPIO_InitStruct.Pin = L2_Pin;
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4813      	ldr	r0, [pc, #76]	; (8000948 <MX_GPIO_Init+0x15c>)
 80008fa:	f000 fad9 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin R4_Pin R3_Pin */
  GPIO_InitStruct.Pin = R2_Pin|R4_Pin|R3_Pin;
 80008fe:	2338      	movs	r3, #56	; 0x38
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <MX_GPIO_Init+0x158>)
 8000916:	f000 facb 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : L3_Pin */
  GPIO_InitStruct.Pin = L3_Pin;
 800091a:	2340      	movs	r3, #64	; 0x40
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L3_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_GPIO_Init+0x158>)
 800092e:	f000 fabf 	bl	8000eb0 <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	; 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000
 8000944:	40020400 	.word	0x40020400
 8000948:	40020800 	.word	0x40020800

0800094c <ReadMatrixButton_1Row>:

/* USER CODE BEGIN 4 */
void ReadMatrixButton_1Row() {
 800094c:	b598      	push	{r3, r4, r7, lr}
 800094e:	af00      	add	r7, sp, #0
	//
	static uint8_t X = 0;

	//READ L1-L4
	register int i;
	for (i = 0; i < 4; i++) {
 8000950:	2400      	movs	r4, #0
 8000952:	e031      	b.n	80009b8 <ReadMatrixButton_1Row+0x6c>
		if (HAL_GPIO_ReadPin(L[i].PORT, L[i].PIN))
 8000954:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <ReadMatrixButton_1Row+0xec>)
 8000956:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 800095a:	4937      	ldr	r1, [pc, #220]	; (8000a38 <ReadMatrixButton_1Row+0xec>)
 800095c:	00e3      	lsls	r3, r4, #3
 800095e:	440b      	add	r3, r1
 8000960:	889b      	ldrh	r3, [r3, #4]
 8000962:	4619      	mov	r1, r3
 8000964:	4610      	mov	r0, r2
 8000966:	f000 fc27 	bl	80011b8 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d012      	beq.n	8000996 <ReadMatrixButton_1Row+0x4a>
		{
			ButtonMatrix &= ~(1 << (X * 4 + i));
 8000970:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <ReadMatrixButton_1Row+0xf0>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4423      	add	r3, r4
 8000978:	2201      	movs	r2, #1
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	b21b      	sxth	r3, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	b21a      	sxth	r2, r3
 8000984:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <ReadMatrixButton_1Row+0xf4>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	b21b      	sxth	r3, r3
 800098a:	4013      	ands	r3, r2
 800098c:	b21b      	sxth	r3, r3
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <ReadMatrixButton_1Row+0xf4>)
 8000992:	801a      	strh	r2, [r3, #0]
 8000994:	e00f      	b.n	80009b6 <ReadMatrixButton_1Row+0x6a>

		}
		else
		{
			ButtonMatrix |= 1 << (X * 4 + i);
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <ReadMatrixButton_1Row+0xf0>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4423      	add	r3, r4
 800099e:	2201      	movs	r2, #1
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	b21a      	sxth	r2, r3
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <ReadMatrixButton_1Row+0xf4>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <ReadMatrixButton_1Row+0xf4>)
 80009b4:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 80009b6:	3401      	adds	r4, #1
 80009b8:	2c03      	cmp	r4, #3
 80009ba:	ddcb      	ble.n	8000954 <ReadMatrixButton_1Row+0x8>

		}

	}
	//SET RX
	HAL_GPIO_WritePin(R[X].PORT, R[X].PIN, 1);
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <ReadMatrixButton_1Row+0xf0>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <ReadMatrixButton_1Row+0xf8>)
 80009c4:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <ReadMatrixButton_1Row+0xf0>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <ReadMatrixButton_1Row+0xf8>)
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	4413      	add	r3, r2
 80009d2:	889b      	ldrh	r3, [r3, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	4619      	mov	r1, r3
 80009d8:	f000 fc06 	bl	80011e8 <HAL_GPIO_WritePin>
	//RESET RX+1%4
	HAL_GPIO_WritePin(R[(X + 1) % 4].PORT, R[(X + 1) % 4].PIN, 0);
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <ReadMatrixButton_1Row+0xf0>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	425a      	negs	r2, r3
 80009e4:	f003 0303 	and.w	r3, r3, #3
 80009e8:	f002 0203 	and.w	r2, r2, #3
 80009ec:	bf58      	it	pl
 80009ee:	4253      	negpl	r3, r2
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <ReadMatrixButton_1Row+0xf8>)
 80009f2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <ReadMatrixButton_1Row+0xf0>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	425a      	negs	r2, r3
 80009fe:	f003 0303 	and.w	r3, r3, #3
 8000a02:	f002 0203 	and.w	r2, r2, #3
 8000a06:	bf58      	it	pl
 8000a08:	4253      	negpl	r3, r2
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <ReadMatrixButton_1Row+0xf8>)
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	4413      	add	r3, r2
 8000a10:	889b      	ldrh	r3, [r3, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	f000 fbe7 	bl	80011e8 <HAL_GPIO_WritePin>
	X++;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <ReadMatrixButton_1Row+0xf0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <ReadMatrixButton_1Row+0xf0>)
 8000a24:	701a      	strb	r2, [r3, #0]
	X %= 4; // it is mod. eg. 4 %= 4 = 1 เศษ 0 ----> x = 0
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <ReadMatrixButton_1Row+0xf0>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <ReadMatrixButton_1Row+0xf0>)
 8000a32:	701a      	strb	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	bd98      	pop	{r3, r4, r7, pc}
 8000a38:	20000020 	.word	0x20000020
 8000a3c:	200000c8 	.word	0x200000c8
 8000a40:	200000ac 	.word	0x200000ac
 8000a44:	20000000 	.word	0x20000000

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a92:	2007      	movs	r0, #7
 8000a94:	f000 f9d8 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12b      	bne.n	8000b1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000afe:	230c      	movs	r3, #12
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_UART_MspInit+0x8c>)
 8000b1a:	f000 f9c9 	bl	8000eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40004400 	.word	0x40004400
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f890 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb2:	490e      	ldr	r1, [pc, #56]	; (8000bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc8:	4c0b      	ldr	r4, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bd6:	f7ff ffd7 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f001 fa79 	bl	80020d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fc7d 	bl	80004dc <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000bf0:	08002168 	.word	0x08002168
  ldr r2, =_sbss
 8000bf4:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000bf8:	200000d0 	.word	0x200000d0

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f90d 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff ff0e 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f917 	bl	8000e96 <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f8ed 	bl	8000e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000040 	.word	0x20000040
 8000c9c:	20000048 	.word	0x20000048
 8000ca0:	20000044 	.word	0x20000044

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000048 	.word	0x20000048
 8000cc8:	200000cc 	.word	0x200000cc

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200000cc 	.word	0x200000cc

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e14:	d301      	bcc.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00f      	b.n	8000e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <SysTick_Config+0x40>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	210f      	movs	r1, #15
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f7ff ff8e 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <SysTick_Config+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SysTick_Config+0x40>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff47 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e70:	f7ff ff5c 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	6978      	ldr	r0, [r7, #20]
 8000e7c:	f7ff ff8e 	bl	8000d9c <NVIC_EncodePriority>
 8000e80:	4602      	mov	r2, r0
 8000e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff5d 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ffb0 	bl	8000e04 <SysTick_Config>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
 8000eca:	e159      	b.n	8001180 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	f040 8148 	bne.w	800117a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d005      	beq.n	8000f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d130      	bne.n	8000f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	091b      	lsrs	r3, r3, #4
 8000f4e:	f003 0201 	and.w	r2, r3, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d017      	beq.n	8000fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d123      	bne.n	8000ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	08da      	lsrs	r2, r3, #3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3208      	adds	r2, #8
 8000fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	691a      	ldr	r2, [r3, #16]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	69b9      	ldr	r1, [r7, #24]
 8000ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0203 	and.w	r2, r3, #3
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 80a2 	beq.w	800117a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b57      	ldr	r3, [pc, #348]	; (8001198 <HAL_GPIO_Init+0x2e8>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a56      	ldr	r2, [pc, #344]	; (8001198 <HAL_GPIO_Init+0x2e8>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b54      	ldr	r3, [pc, #336]	; (8001198 <HAL_GPIO_Init+0x2e8>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001052:	4a52      	ldr	r2, [pc, #328]	; (800119c <HAL_GPIO_Init+0x2ec>)
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a49      	ldr	r2, [pc, #292]	; (80011a0 <HAL_GPIO_Init+0x2f0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x202>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a48      	ldr	r2, [pc, #288]	; (80011a4 <HAL_GPIO_Init+0x2f4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x1fe>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a47      	ldr	r2, [pc, #284]	; (80011a8 <HAL_GPIO_Init+0x2f8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x1fa>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a46      	ldr	r2, [pc, #280]	; (80011ac <HAL_GPIO_Init+0x2fc>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x1f6>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a45      	ldr	r2, [pc, #276]	; (80011b0 <HAL_GPIO_Init+0x300>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x1f2>
 800109e:	2304      	movs	r3, #4
 80010a0:	e008      	b.n	80010b4 <HAL_GPIO_Init+0x204>
 80010a2:	2307      	movs	r3, #7
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x204>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x204>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x204>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x204>
 80010b2:	2300      	movs	r3, #0
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c4:	4935      	ldr	r1, [pc, #212]	; (800119c <HAL_GPIO_Init+0x2ec>)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <HAL_GPIO_Init+0x304>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f6:	4a2f      	ldr	r2, [pc, #188]	; (80011b4 <HAL_GPIO_Init+0x304>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <HAL_GPIO_Init+0x304>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001120:	4a24      	ldr	r2, [pc, #144]	; (80011b4 <HAL_GPIO_Init+0x304>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <HAL_GPIO_Init+0x304>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114a:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_GPIO_Init+0x304>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_GPIO_Init+0x304>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <HAL_GPIO_Init+0x304>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	f67f aea2 	bls.w	8000ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40013800 	.word	0x40013800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40013c00 	.word	0x40013c00

080011b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e001      	b.n	80011da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e267      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d075      	beq.n	8001326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123a:	4b88      	ldr	r3, [pc, #544]	; (800145c <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b04      	cmp	r3, #4
 8001244:	d00c      	beq.n	8001260 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001246:	4b85      	ldr	r3, [pc, #532]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124e:	2b08      	cmp	r3, #8
 8001250:	d112      	bne.n	8001278 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001252:	4b82      	ldr	r3, [pc, #520]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800125e:	d10b      	bne.n	8001278 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	4b7e      	ldr	r3, [pc, #504]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d05b      	beq.n	8001324 <HAL_RCC_OscConfig+0x108>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d157      	bne.n	8001324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e242      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001280:	d106      	bne.n	8001290 <HAL_RCC_OscConfig+0x74>
 8001282:	4b76      	ldr	r3, [pc, #472]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a75      	ldr	r2, [pc, #468]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e01d      	b.n	80012cc <HAL_RCC_OscConfig+0xb0>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x98>
 800129a:	4b70      	ldr	r3, [pc, #448]	; (800145c <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a6f      	ldr	r2, [pc, #444]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b6d      	ldr	r3, [pc, #436]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6c      	ldr	r2, [pc, #432]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e00b      	b.n	80012cc <HAL_RCC_OscConfig+0xb0>
 80012b4:	4b69      	ldr	r3, [pc, #420]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a68      	ldr	r2, [pc, #416]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b66      	ldr	r3, [pc, #408]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a65      	ldr	r2, [pc, #404]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fcfa 	bl	8000ccc <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fcf6 	bl	8000ccc <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e207      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b5b      	ldr	r3, [pc, #364]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xc0>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fce6 	bl	8000ccc <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fce2 	bl	8000ccc <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e1f3      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	4b51      	ldr	r3, [pc, #324]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0xe8>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d063      	beq.n	80013fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001332:	4b4a      	ldr	r3, [pc, #296]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001346:	2b08      	cmp	r3, #8
 8001348:	d11c      	bne.n	8001384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134a:	4b44      	ldr	r3, [pc, #272]	; (800145c <HAL_RCC_OscConfig+0x240>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_RCC_OscConfig+0x152>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e1c7      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4937      	ldr	r1, [pc, #220]	; (800145c <HAL_RCC_OscConfig+0x240>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	e03a      	b.n	80013fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d020      	beq.n	80013ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <HAL_RCC_OscConfig+0x244>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fc9b 	bl	8000ccc <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fc97 	bl	8000ccc <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e1a8      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4925      	ldr	r1, [pc, #148]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e015      	b.n	80013fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_RCC_OscConfig+0x244>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc7a 	bl	8000ccc <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc76 	bl	8000ccc <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e187      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d036      	beq.n	8001474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d016      	beq.n	800143c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_RCC_OscConfig+0x248>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001414:	f7ff fc5a 	bl	8000ccc <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff fc56 	bl	8000ccc <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e167      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x200>
 800143a:	e01b      	b.n	8001474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_OscConfig+0x248>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fc43 	bl	8000ccc <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	e00e      	b.n	8001468 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff fc3f 	bl	8000ccc <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d907      	bls.n	8001468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e150      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
 800145c:	40023800 	.word	0x40023800
 8001460:	42470000 	.word	0x42470000
 8001464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	4b88      	ldr	r3, [pc, #544]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800146a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ea      	bne.n	800144a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 8097 	beq.w	80015b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001486:	4b81      	ldr	r3, [pc, #516]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10f      	bne.n	80014b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b7d      	ldr	r3, [pc, #500]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a7c      	ldr	r2, [pc, #496]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b7a      	ldr	r3, [pc, #488]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ae:	2301      	movs	r3, #1
 80014b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b2:	4b77      	ldr	r3, [pc, #476]	; (8001690 <HAL_RCC_OscConfig+0x474>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d118      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014be:	4b74      	ldr	r3, [pc, #464]	; (8001690 <HAL_RCC_OscConfig+0x474>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a73      	ldr	r2, [pc, #460]	; (8001690 <HAL_RCC_OscConfig+0x474>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fbff 	bl	8000ccc <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d2:	f7ff fbfb 	bl	8000ccc <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e10c      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	4b6a      	ldr	r3, [pc, #424]	; (8001690 <HAL_RCC_OscConfig+0x474>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x2ea>
 80014f8:	4b64      	ldr	r3, [pc, #400]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	4a63      	ldr	r2, [pc, #396]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6713      	str	r3, [r2, #112]	; 0x70
 8001504:	e01c      	b.n	8001540 <HAL_RCC_OscConfig+0x324>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b05      	cmp	r3, #5
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x30c>
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001512:	4a5e      	ldr	r2, [pc, #376]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6713      	str	r3, [r2, #112]	; 0x70
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a5b      	ldr	r2, [pc, #364]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0x324>
 8001528:	4b58      	ldr	r3, [pc, #352]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a57      	ldr	r2, [pc, #348]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	4b55      	ldr	r3, [pc, #340]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	4a54      	ldr	r2, [pc, #336]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800153a:	f023 0304 	bic.w	r3, r3, #4
 800153e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fbc0 	bl	8000ccc <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff fbbc 	bl	8000ccc <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0cb      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	4b49      	ldr	r3, [pc, #292]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0ee      	beq.n	8001550 <HAL_RCC_OscConfig+0x334>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fbaa 	bl	8000ccc <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157a:	e00a      	b.n	8001592 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff fba6 	bl	8000ccc <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0b5      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1ee      	bne.n	800157c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d105      	bne.n	80015b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a4:	4b39      	ldr	r3, [pc, #228]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	4a38      	ldr	r2, [pc, #224]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80015aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80a1 	beq.w	80016fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d05c      	beq.n	8001680 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d141      	bne.n	8001652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ce:	4b31      	ldr	r3, [pc, #196]	; (8001694 <HAL_RCC_OscConfig+0x478>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fb7a 	bl	8000ccc <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff fb76 	bl	8000ccc <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e087      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	3b01      	subs	r3, #1
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	491b      	ldr	r1, [pc, #108]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_RCC_OscConfig+0x478>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fb4f 	bl	8000ccc <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fb4b 	bl	8000ccc <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e05c      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x416>
 8001650:	e054      	b.n	80016fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_RCC_OscConfig+0x478>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb38 	bl	8000ccc <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff fb34 	bl	8000ccc <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e045      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x444>
 800167e:	e03d      	b.n	80016fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d107      	bne.n	8001698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e038      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
 800168c:	40023800 	.word	0x40023800
 8001690:	40007000 	.word	0x40007000
 8001694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x4ec>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d028      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d121      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d11a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016c8:	4013      	ands	r3, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d111      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	3b01      	subs	r3, #1
 80016e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0cc      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001720:	4b68      	ldr	r3, [pc, #416]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d90c      	bls.n	8001748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0b8      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d020      	beq.n	8001796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001760:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a58      	ldr	r2, [pc, #352]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800176a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001784:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	494d      	ldr	r1, [pc, #308]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d044      	beq.n	800182c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d119      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e07f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d003      	beq.n	80017ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e06f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e067      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ea:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f023 0203 	bic.w	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4934      	ldr	r1, [pc, #208]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017fc:	f7ff fa66 	bl	8000ccc <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	e00a      	b.n	800181a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001804:	f7ff fa62 	bl	8000ccc <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e04f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 020c 	and.w	r2, r3, #12
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	429a      	cmp	r2, r3
 800182a:	d1eb      	bne.n	8001804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d20c      	bcs.n	8001854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e032      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4916      	ldr	r1, [pc, #88]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d009      	beq.n	8001892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	490e      	ldr	r1, [pc, #56]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001892:	f000 f821 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8001896:	4602      	mov	r2, r0
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	490a      	ldr	r1, [pc, #40]	; (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	5ccb      	ldrb	r3, [r1, r3]
 80018a6:	fa22 f303 	lsr.w	r3, r2, r3
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f9c6 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00
 80018c8:	40023800 	.word	0x40023800
 80018cc:	08002140 	.word	0x08002140
 80018d0:	20000040 	.word	0x20000040
 80018d4:	20000044 	.word	0x20000044

080018d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018dc:	b094      	sub	sp, #80	; 0x50
 80018de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44
 80018e4:	2300      	movs	r3, #0
 80018e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018e8:	2300      	movs	r3, #0
 80018ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f0:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d00d      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x40>
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	f200 80e1 	bhi.w	8001ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x34>
 8001906:	2b04      	cmp	r3, #4
 8001908:	d003      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x3a>
 800190a:	e0db      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800190c:	4b73      	ldr	r3, [pc, #460]	; (8001adc <HAL_RCC_GetSysClockFreq+0x204>)
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001910:	e0db      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001912:	4b73      	ldr	r3, [pc, #460]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001916:	e0d8      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001918:	4b6f      	ldr	r3, [pc, #444]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001920:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001922:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d063      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192e:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	099b      	lsrs	r3, r3, #6
 8001934:	2200      	movs	r2, #0
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
 8001938:	63fa      	str	r2, [r7, #60]	; 0x3c
 800193a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
 8001942:	2300      	movs	r3, #0
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
 8001946:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800194a:	4622      	mov	r2, r4
 800194c:	462b      	mov	r3, r5
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0159      	lsls	r1, r3, #5
 8001958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195c:	0150      	lsls	r0, r2, #5
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4621      	mov	r1, r4
 8001964:	1a51      	subs	r1, r2, r1
 8001966:	6139      	str	r1, [r7, #16]
 8001968:	4629      	mov	r1, r5
 800196a:	eb63 0301 	sbc.w	r3, r3, r1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800197c:	4659      	mov	r1, fp
 800197e:	018b      	lsls	r3, r1, #6
 8001980:	4651      	mov	r1, sl
 8001982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001986:	4651      	mov	r1, sl
 8001988:	018a      	lsls	r2, r1, #6
 800198a:	4651      	mov	r1, sl
 800198c:	ebb2 0801 	subs.w	r8, r2, r1
 8001990:	4659      	mov	r1, fp
 8001992:	eb63 0901 	sbc.w	r9, r3, r1
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019aa:	4690      	mov	r8, r2
 80019ac:	4699      	mov	r9, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	eb18 0303 	adds.w	r3, r8, r3
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	462b      	mov	r3, r5
 80019b8:	eb49 0303 	adc.w	r3, r9, r3
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ca:	4629      	mov	r1, r5
 80019cc:	024b      	lsls	r3, r1, #9
 80019ce:	4621      	mov	r1, r4
 80019d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019d4:	4621      	mov	r1, r4
 80019d6:	024a      	lsls	r2, r1, #9
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019de:	2200      	movs	r2, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019e8:	f7fe fbf6 	bl	80001d8 <__aeabi_uldivmod>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4613      	mov	r3, r2
 80019f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f4:	e058      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	099b      	lsrs	r3, r3, #6
 80019fc:	2200      	movs	r2, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	4611      	mov	r1, r2
 8001a02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a06:	623b      	str	r3, [r7, #32]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a10:	4642      	mov	r2, r8
 8001a12:	464b      	mov	r3, r9
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	0159      	lsls	r1, r3, #5
 8001a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a22:	0150      	lsls	r0, r2, #5
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4641      	mov	r1, r8
 8001a2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a2e:	4649      	mov	r1, r9
 8001a30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a48:	ebb2 040a 	subs.w	r4, r2, sl
 8001a4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	00eb      	lsls	r3, r5, #3
 8001a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a5e:	00e2      	lsls	r2, r4, #3
 8001a60:	4614      	mov	r4, r2
 8001a62:	461d      	mov	r5, r3
 8001a64:	4643      	mov	r3, r8
 8001a66:	18e3      	adds	r3, r4, r3
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	464b      	mov	r3, r9
 8001a6c:	eb45 0303 	adc.w	r3, r5, r3
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	028b      	lsls	r3, r1, #10
 8001a82:	4621      	mov	r1, r4
 8001a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a88:	4621      	mov	r1, r4
 8001a8a:	028a      	lsls	r2, r1, #10
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a92:	2200      	movs	r2, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	61fa      	str	r2, [r7, #28]
 8001a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a9c:	f7fe fb9c 	bl	80001d8 <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ab8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ac2:	e002      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3750      	adds	r7, #80	; 0x50
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	00f42400 	.word	0x00f42400
 8001ae0:	007a1200 	.word	0x007a1200

08001ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000040 	.word	0x20000040

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	0a9b      	lsrs	r3, r3, #10
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08002150 	.word	0x08002150

08001b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b28:	f7ff ffdc 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0b5b      	lsrs	r3, r3, #13
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08002150 	.word	0x08002150

08001b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e03f      	b.n	8001bde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe ff96 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2224      	movs	r2, #36	; 0x24
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f829 	bl	8001be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bec:	b0c0      	sub	sp, #256	; 0x100
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c04:	68d9      	ldr	r1, [r3, #12]
 8001c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	ea40 0301 	orr.w	r3, r0, r1
 8001c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c40:	f021 010c 	bic.w	r1, r1, #12
 8001c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c62:	6999      	ldr	r1, [r3, #24]
 8001c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	ea40 0301 	orr.w	r3, r0, r1
 8001c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b8f      	ldr	r3, [pc, #572]	; (8001eb4 <UART_SetConfig+0x2cc>)
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d005      	beq.n	8001c88 <UART_SetConfig+0xa0>
 8001c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b8d      	ldr	r3, [pc, #564]	; (8001eb8 <UART_SetConfig+0x2d0>)
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d104      	bne.n	8001c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c88:	f7ff ff4c 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 8001c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001c90:	e003      	b.n	8001c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c92:	f7ff ff33 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8001c96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca4:	f040 810c 	bne.w	8001ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cac:	2200      	movs	r2, #0
 8001cae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001cba:	4622      	mov	r2, r4
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	1891      	adds	r1, r2, r2
 8001cc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8001cc2:	415b      	adcs	r3, r3
 8001cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cca:	4621      	mov	r1, r4
 8001ccc:	eb12 0801 	adds.w	r8, r2, r1
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	eb43 0901 	adc.w	r9, r3, r1
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cea:	4690      	mov	r8, r2
 8001cec:	4699      	mov	r9, r3
 8001cee:	4623      	mov	r3, r4
 8001cf0:	eb18 0303 	adds.w	r3, r8, r3
 8001cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001cf8:	462b      	mov	r3, r5
 8001cfa:	eb49 0303 	adc.w	r3, r9, r3
 8001cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001d16:	460b      	mov	r3, r1
 8001d18:	18db      	adds	r3, r3, r3
 8001d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	eb42 0303 	adc.w	r3, r2, r3
 8001d22:	657b      	str	r3, [r7, #84]	; 0x54
 8001d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001d2c:	f7fe fa54 	bl	80001d8 <__aeabi_uldivmod>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <UART_SetConfig+0x2d4>)
 8001d36:	fba3 2302 	umull	r2, r3, r3, r2
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	011c      	lsls	r4, r3, #4
 8001d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d42:	2200      	movs	r2, #0
 8001d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001d50:	4642      	mov	r2, r8
 8001d52:	464b      	mov	r3, r9
 8001d54:	1891      	adds	r1, r2, r2
 8001d56:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d58:	415b      	adcs	r3, r3
 8001d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d60:	4641      	mov	r1, r8
 8001d62:	eb12 0a01 	adds.w	sl, r2, r1
 8001d66:	4649      	mov	r1, r9
 8001d68:	eb43 0b01 	adc.w	fp, r3, r1
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d80:	4692      	mov	sl, r2
 8001d82:	469b      	mov	fp, r3
 8001d84:	4643      	mov	r3, r8
 8001d86:	eb1a 0303 	adds.w	r3, sl, r3
 8001d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d8e:	464b      	mov	r3, r9
 8001d90:	eb4b 0303 	adc.w	r3, fp, r3
 8001d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001da4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001dac:	460b      	mov	r3, r1
 8001dae:	18db      	adds	r3, r3, r3
 8001db0:	643b      	str	r3, [r7, #64]	; 0x40
 8001db2:	4613      	mov	r3, r2
 8001db4:	eb42 0303 	adc.w	r3, r2, r3
 8001db8:	647b      	str	r3, [r7, #68]	; 0x44
 8001dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001dc2:	f7fe fa09 	bl	80001d8 <__aeabi_uldivmod>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <UART_SetConfig+0x2d4>)
 8001dce:	fba3 2301 	umull	r2, r3, r3, r1
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2264      	movs	r2, #100	; 0x64
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	1acb      	subs	r3, r1, r3
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001de2:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <UART_SetConfig+0x2d4>)
 8001de4:	fba3 2302 	umull	r2, r3, r3, r2
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001df0:	441c      	add	r4, r3
 8001df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001e04:	4642      	mov	r2, r8
 8001e06:	464b      	mov	r3, r9
 8001e08:	1891      	adds	r1, r2, r2
 8001e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e0c:	415b      	adcs	r3, r3
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e14:	4641      	mov	r1, r8
 8001e16:	1851      	adds	r1, r2, r1
 8001e18:	6339      	str	r1, [r7, #48]	; 0x30
 8001e1a:	4649      	mov	r1, r9
 8001e1c:	414b      	adcs	r3, r1
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001e2c:	4659      	mov	r1, fp
 8001e2e:	00cb      	lsls	r3, r1, #3
 8001e30:	4651      	mov	r1, sl
 8001e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e36:	4651      	mov	r1, sl
 8001e38:	00ca      	lsls	r2, r1, #3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4642      	mov	r2, r8
 8001e42:	189b      	adds	r3, r3, r2
 8001e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e48:	464b      	mov	r3, r9
 8001e4a:	460a      	mov	r2, r1
 8001e4c:	eb42 0303 	adc.w	r3, r2, r3
 8001e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001e68:	460b      	mov	r3, r1
 8001e6a:	18db      	adds	r3, r3, r3
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e6e:	4613      	mov	r3, r2
 8001e70:	eb42 0303 	adc.w	r3, r2, r3
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e7e:	f7fe f9ab 	bl	80001d8 <__aeabi_uldivmod>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <UART_SetConfig+0x2d4>)
 8001e88:	fba3 1302 	umull	r1, r3, r3, r2
 8001e8c:	095b      	lsrs	r3, r3, #5
 8001e8e:	2164      	movs	r1, #100	; 0x64
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	3332      	adds	r3, #50	; 0x32
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <UART_SetConfig+0x2d4>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	f003 0207 	and.w	r2, r3, #7
 8001ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4422      	add	r2, r4
 8001eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001eb0:	e105      	b.n	80020be <UART_SetConfig+0x4d6>
 8001eb2:	bf00      	nop
 8001eb4:	40011000 	.word	0x40011000
 8001eb8:	40011400 	.word	0x40011400
 8001ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001eca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001ed2:	4642      	mov	r2, r8
 8001ed4:	464b      	mov	r3, r9
 8001ed6:	1891      	adds	r1, r2, r2
 8001ed8:	6239      	str	r1, [r7, #32]
 8001eda:	415b      	adcs	r3, r3
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ee2:	4641      	mov	r1, r8
 8001ee4:	1854      	adds	r4, r2, r1
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	eb43 0501 	adc.w	r5, r3, r1
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	00eb      	lsls	r3, r5, #3
 8001ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001efa:	00e2      	lsls	r2, r4, #3
 8001efc:	4614      	mov	r4, r2
 8001efe:	461d      	mov	r5, r3
 8001f00:	4643      	mov	r3, r8
 8001f02:	18e3      	adds	r3, r4, r3
 8001f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f08:	464b      	mov	r3, r9
 8001f0a:	eb45 0303 	adc.w	r3, r5, r3
 8001f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f2e:	4629      	mov	r1, r5
 8001f30:	008b      	lsls	r3, r1, #2
 8001f32:	4621      	mov	r1, r4
 8001f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f38:	4621      	mov	r1, r4
 8001f3a:	008a      	lsls	r2, r1, #2
 8001f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001f40:	f7fe f94a 	bl	80001d8 <__aeabi_uldivmod>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4b60      	ldr	r3, [pc, #384]	; (80020cc <UART_SetConfig+0x4e4>)
 8001f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	011c      	lsls	r4, r3, #4
 8001f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f56:	2200      	movs	r2, #0
 8001f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f64:	4642      	mov	r2, r8
 8001f66:	464b      	mov	r3, r9
 8001f68:	1891      	adds	r1, r2, r2
 8001f6a:	61b9      	str	r1, [r7, #24]
 8001f6c:	415b      	adcs	r3, r3
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f74:	4641      	mov	r1, r8
 8001f76:	1851      	adds	r1, r2, r1
 8001f78:	6139      	str	r1, [r7, #16]
 8001f7a:	4649      	mov	r1, r9
 8001f7c:	414b      	adcs	r3, r1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f8c:	4659      	mov	r1, fp
 8001f8e:	00cb      	lsls	r3, r1, #3
 8001f90:	4651      	mov	r1, sl
 8001f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f96:	4651      	mov	r1, sl
 8001f98:	00ca      	lsls	r2, r1, #3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fa8:	464b      	mov	r3, r9
 8001faa:	460a      	mov	r2, r1
 8001fac:	eb42 0303 	adc.w	r3, r2, r3
 8001fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001fcc:	4649      	mov	r1, r9
 8001fce:	008b      	lsls	r3, r1, #2
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fd6:	4641      	mov	r1, r8
 8001fd8:	008a      	lsls	r2, r1, #2
 8001fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001fde:	f7fe f8fb 	bl	80001d8 <__aeabi_uldivmod>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4b39      	ldr	r3, [pc, #228]	; (80020cc <UART_SetConfig+0x4e4>)
 8001fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	2164      	movs	r1, #100	; 0x64
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	3332      	adds	r3, #50	; 0x32
 8001ffa:	4a34      	ldr	r2, [pc, #208]	; (80020cc <UART_SetConfig+0x4e4>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	095b      	lsrs	r3, r3, #5
 8002002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002006:	441c      	add	r4, r3
 8002008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800200c:	2200      	movs	r2, #0
 800200e:	673b      	str	r3, [r7, #112]	; 0x70
 8002010:	677a      	str	r2, [r7, #116]	; 0x74
 8002012:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002016:	4642      	mov	r2, r8
 8002018:	464b      	mov	r3, r9
 800201a:	1891      	adds	r1, r2, r2
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	415b      	adcs	r3, r3
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002026:	4641      	mov	r1, r8
 8002028:	1851      	adds	r1, r2, r1
 800202a:	6039      	str	r1, [r7, #0]
 800202c:	4649      	mov	r1, r9
 800202e:	414b      	adcs	r3, r1
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800203e:	4659      	mov	r1, fp
 8002040:	00cb      	lsls	r3, r1, #3
 8002042:	4651      	mov	r1, sl
 8002044:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002048:	4651      	mov	r1, sl
 800204a:	00ca      	lsls	r2, r1, #3
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	4603      	mov	r3, r0
 8002052:	4642      	mov	r2, r8
 8002054:	189b      	adds	r3, r3, r2
 8002056:	66bb      	str	r3, [r7, #104]	; 0x68
 8002058:	464b      	mov	r3, r9
 800205a:	460a      	mov	r2, r1
 800205c:	eb42 0303 	adc.w	r3, r2, r3
 8002060:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	663b      	str	r3, [r7, #96]	; 0x60
 800206c:	667a      	str	r2, [r7, #100]	; 0x64
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800207a:	4649      	mov	r1, r9
 800207c:	008b      	lsls	r3, r1, #2
 800207e:	4641      	mov	r1, r8
 8002080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002084:	4641      	mov	r1, r8
 8002086:	008a      	lsls	r2, r1, #2
 8002088:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800208c:	f7fe f8a4 	bl	80001d8 <__aeabi_uldivmod>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <UART_SetConfig+0x4e4>)
 8002096:	fba3 1302 	umull	r1, r3, r3, r2
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2164      	movs	r1, #100	; 0x64
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	3332      	adds	r3, #50	; 0x32
 80020a8:	4a08      	ldr	r2, [pc, #32]	; (80020cc <UART_SetConfig+0x4e4>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	f003 020f 	and.w	r2, r3, #15
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4422      	add	r2, r4
 80020bc:	609a      	str	r2, [r3, #8]
}
 80020be:	bf00      	nop
 80020c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80020c4:	46bd      	mov	sp, r7
 80020c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ca:	bf00      	nop
 80020cc:	51eb851f 	.word	0x51eb851f

080020d0 <__libc_init_array>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	4d0d      	ldr	r5, [pc, #52]	; (8002108 <__libc_init_array+0x38>)
 80020d4:	4c0d      	ldr	r4, [pc, #52]	; (800210c <__libc_init_array+0x3c>)
 80020d6:	1b64      	subs	r4, r4, r5
 80020d8:	10a4      	asrs	r4, r4, #2
 80020da:	2600      	movs	r6, #0
 80020dc:	42a6      	cmp	r6, r4
 80020de:	d109      	bne.n	80020f4 <__libc_init_array+0x24>
 80020e0:	4d0b      	ldr	r5, [pc, #44]	; (8002110 <__libc_init_array+0x40>)
 80020e2:	4c0c      	ldr	r4, [pc, #48]	; (8002114 <__libc_init_array+0x44>)
 80020e4:	f000 f820 	bl	8002128 <_init>
 80020e8:	1b64      	subs	r4, r4, r5
 80020ea:	10a4      	asrs	r4, r4, #2
 80020ec:	2600      	movs	r6, #0
 80020ee:	42a6      	cmp	r6, r4
 80020f0:	d105      	bne.n	80020fe <__libc_init_array+0x2e>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f8:	4798      	blx	r3
 80020fa:	3601      	adds	r6, #1
 80020fc:	e7ee      	b.n	80020dc <__libc_init_array+0xc>
 80020fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002102:	4798      	blx	r3
 8002104:	3601      	adds	r6, #1
 8002106:	e7f2      	b.n	80020ee <__libc_init_array+0x1e>
 8002108:	08002160 	.word	0x08002160
 800210c:	08002160 	.word	0x08002160
 8002110:	08002160 	.word	0x08002160
 8002114:	08002164 	.word	0x08002164

08002118 <memset>:
 8002118:	4402      	add	r2, r0
 800211a:	4603      	mov	r3, r0
 800211c:	4293      	cmp	r3, r2
 800211e:	d100      	bne.n	8002122 <memset+0xa>
 8002120:	4770      	bx	lr
 8002122:	f803 1b01 	strb.w	r1, [r3], #1
 8002126:	e7f9      	b.n	800211c <memset+0x4>

08002128 <_init>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr

08002134 <_fini>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	bf00      	nop
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr
